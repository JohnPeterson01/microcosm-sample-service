"""
Create Initial Models

Revision ID: dea71e610720
Revises: e107ab9eb193
Create Date: 2019-08-28 12:33:23.992504

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'dea71e610720'
down_revision = 'e107ab9eb193'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('order',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('created_at', sa.Float(), nullable=False),
    sa.Column('updated_at', sa.Float(), nullable=False),
    sa.Column('customer_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('purpose', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.Column('resolution', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('customer_id')
    )
    op.create_table('order_event',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('created_at', sa.Float(), nullable=False),
    sa.Column('updated_at', sa.Float(), nullable=False),
    sa.Column('customer_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('pizza_size', microcosm_postgres.types.EnumType(length=255), nullable=True),
    sa.Column('crust_type', microcosm_postgres.types.EnumType(length=255), nullable=True),
    sa.Column('topping_type', microcosm_postgres.types.EnumType(length=255), nullable=True),
    sa.Column('purpose', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.Column('resolution', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.Column('order_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('event_type', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.Column('clock', microcosm_postgres.types.Serial(), server_default=FetchedValue(), nullable=False),
    sa.Column('parent_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=True),
    sa.Column('state', postgresql.ARRAY(microcosm_postgres.types.EnumType(length=255)), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.CheckConstraint("crust_type IS NOT NULL OR event_type NOT IN ('PizzaCreated')", name='require_order_event_crust_type'),
    sa.CheckConstraint("customer_id IS NOT NULL OR event_type NOT IN ('OrderInitialized')", name='require_order_event_customer_id'),
    sa.CheckConstraint("parent_id IS NOT NULL OR (version = 1 AND event_type IN ('OrderInitialized'))", name='require_order_event_parent_id'),
    sa.CheckConstraint("pizza_size IS NOT NULL OR event_type NOT IN ('PizzaCreated')", name='require_order_event_pizza_size'),
    sa.CheckConstraint("topping_type IS NOT NULL OR event_type NOT IN ('PizzaToppingAdded')", name='require_order_event_topping_type'),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['order_event.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('clock'),
    sa.UniqueConstraint('parent_id')
    )
    op.create_index('order_event_unique_logical_clock', 'order_event', ['order_id', 'clock'], unique=True)
    op.create_table('topping',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('created_at', microcosm_postgres.models.UTCDateTime(), nullable=False),
    sa.Column('updated_at', microcosm_postgres.models.UTCDateTime(), nullable=False),
    sa.Column('pizza_id', sqlalchemy_utils.types.uuid.UUIDType(length=16), nullable=False),
    sa.Column('topping_type', microcosm_postgres.types.EnumType(length=255), nullable=False),
    sa.ForeignKeyConstraint(['pizza_id'], ['pizza.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('topping')
    op.drop_index('order_event_unique_logical_clock', table_name='order_event')
    op.drop_table('order_event')
    op.drop_table('order')
    # ### end Alembic commands ###
